using BooksAssignment.Data;
using BooksAssignment.Dtos;
using Microsoft.AspNetCore.Mvc;
using System.Net;

namespace BooksAssignment.Controllers
{
    [ApiController]
    [Route("books")]
    public class BooksController : Controller
    {
        private readonly IBooksService _booksService;
        
        public BooksController(
            IBooksService booksService
            )
        {
            _booksService = booksService;
        }

        /// <summary>
        ///  Adds new book with specified properties to database.
        /// </summary>
        /// <param name="request"></param>
        /// <returns>
        /// Autogenerated Id of added book 
        /// </returns>
        [HttpPost]
        public async Task<ActionResult<AddBookResponseDto>> AddNewBook ([FromBody]AddBookRequestDto request)
        {
            try
            {
                var response = await _booksService.AddNewBook(request.Title, request.Author, (int)request.Year, request.Publisher, request.Description);
                return Ok(response);
            }
            
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        ///  Lists all books and their data by provided filters. If no filters are provided, all books will be returned.
        /// </summary>
        /// <param name="request"></param>
        /// <returns>
        /// All corresponding book data
        /// </returns>
        [HttpGet]
        public async Task<ActionResult<List<BookDto>>> GetBooks ([FromQuery]GetBooksRequestDto request)
        {
            var result = await _booksService.GetBooks(request.Author, request.Year, request.Publisher);
            return Ok(result);
        }

        /// <summary>
        ///  Get single book according to Id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns>
        /// All data relating to provided book 
        /// </returns>
        [HttpGet("{id}")]
        public async Task<ActionResult<BookDto>> GetBookById(string id)
        {
            try
            {
                var result = await _booksService.GetBookById(id);
                return Ok(result);
            }
            
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }

        /// <summary>
        ///  Deletes single book from database according to Id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteBookById(string id)
        {
            try
            {
                await _booksService.DeleteBookById(id);
                return NoContent();
            }

            catch (Exception ex)
            {
                return NotFound(ex.Message); 
            }
        }
    }
}
